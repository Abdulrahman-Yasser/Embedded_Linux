EXECVE(2)                           Linux Programmer's Manual                           EXECVE(2)

NNAAMMEE
       execve - execute program

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<uunniissttdd..hh>>

       iinntt eexxeeccvvee((ccoonnsstt cchhaarr **_p_a_t_h_n_a_m_e,, cchhaarr **ccoonnsstt _a_r_g_v[[]],,
                  cchhaarr **ccoonnsstt _e_n_v_p[[]]));;

DDEESSCCRRIIPPTTIIOONN
       eexxeeccvvee()  executes  the  program referred to by _p_a_t_h_n_a_m_e.  This causes the program that is
       currently being run by the calling process to be replaced with a new program,  with  newly
       initialized stack, heap, and (initialized and uninitialized) data segments.

       _p_a_t_h_n_a_m_e must be either a binary executable, or a script starting with a line of the form:

           ##!!_i_n_t_e_r_p_r_e_t_e_r [optional-arg]

       For details of the latter case, see "Interpreter scripts" below.

       _a_r_g_v  is an array of argument strings passed to the new program.  By convention, the first
       of these strings (i.e., _a_r_g_v_[_0_]) should contain the filename associated with the file  be‐
       ing  executed.   _e_n_v_p  is an array of strings, conventionally of the form kkeeyy==vvaalluuee, which
       are passed as environment to the new program.  The _a_r_g_v and _e_n_v_p arrays must each  include
       a null pointer at the end of the array.

       The argument vector and environment can be accessed by the called program's main function,
       when it is defined as:

           int main(int argc, char *argv[], char *envp[])

       Note, however, that the use of a third argument to the main function is not  specified  in
       POSIX.1;  according  to POSIX.1, the environment should be accessed via the external vari‐
       able eennvviirroonn(7).

       eexxeeccvvee() does not return on success, and the text, initialized  data,  uninitialized  data
       (bss),  and  stack of the calling process are overwritten according to the contents of the
       newly loaded program.

       If the current program is being ptraced, a SSIIGGTTRRAAPP signal is sent to it after a successful
       eexxeeccvvee().

       If the set-user-ID bit is set on the program file referred to by _p_a_t_h_n_a_m_e, then the effec‐
       tive user ID of the calling process is changed to that of the owner of the  program  file.
       Similarly,  when the set-group-ID bit of the program file is set the effective group ID of
       the calling process is set to the group of the program file.

       The aforementioned transformations of the effective IDs are _n_o_t performed (i.e., the  set-
       user-ID and set-group-ID bits are ignored) if any of the following is true:

       *  the _n_o___n_e_w___p_r_i_v_s attribute is set for the calling thread (see pprrccttll(2));

       *  the underlying filesystem is mounted _n_o_s_u_i_d (the MMSS__NNOOSSUUIIDD flag for mmoouunntt(2)); or

       *  the calling process is being ptraced.

       The  capabilities of the program file (see ccaappaabbiilliittiieess(7)) are also ignored if any of the
       above are true.

       The effective user ID of the process is copied to the saved  set-user-ID;  similarly,  the
       effective  group  ID  is copied to the saved set-group-ID.  This copying takes place after
       any effective ID changes that occur because of the set-user-ID and set-group-ID mode bits.

       The process's real UID and real GID, as well its supplementary group IDs, are unchanged by
       a call to eexxeeccvvee().

       If  the  executable is an a.out dynamically linked binary executable containing shared-li‐
       brary stubs, the Linux dynamic linker lldd..ssoo(8) is called at  the  start  of  execution  to
       bring needed shared objects into memory and link the executable with them.

       If  the  executable  is  a dynamically linked ELF executable, the interpreter named in the
       PT_INTERP segment is used to load the needed shared objects.  This  interpreter  is  typi‐
       cally _/_l_i_b_/_l_d_-_l_i_n_u_x_._s_o_._2 for binaries linked with glibc (see lldd--lliinnuuxx..ssoo(8)).

       All process attributes are preserved during an eexxeeccvvee(), except the following:

       *  The  dispositions  of  any signals that are being caught are reset to the default (ssiigg‐‐
          nnaall(7)).

       *  Any alternate signal stack is not preserved (ssiiggaallttssttaacckk(2)).

       *  Memory mappings are not preserved (mmmmaapp(2)).

       *  Attached System V shared memory segments are detached (sshhmmaatt(2)).

       *  POSIX shared memory regions are unmapped (sshhmm__ooppeenn(3)).

       *  Open POSIX message queue descriptors are closed (mmqq__oovveerrvviieeww(7)).

       *  Any open POSIX named semaphores are closed (sseemm__oovveerrvviieeww(7)).

       *  POSIX timers are not preserved (ttiimmeerr__ccrreeaattee(2)).

       *  Any open directory streams are closed (ooppeennddiirr(3)).

       *  Memory locks are not preserved (mmlloocckk(2), mmlloocckkaallll(2)).

       *  Exit handlers are not preserved (aatteexxiitt(3), oonn__eexxiitt(3)).

       *  The floating-point environment is reset to the default (see ffeennvv(3)).

       The process attributes in the preceding list are all specified in POSIX.1.  The  following
       Linux-specific process attributes are also not preserved during an eexxeeccvvee():

       *  The  pprrccttll(2) PPRR__SSEETT__DDUUMMPPAABBLLEE flag is set, unless a set-user-ID or set-group ID program
          is being executed, in which case it is cleared.

       *  The pprrccttll(2) PPRR__SSEETT__KKEEEEPPCCAAPPSS flag is cleared.

       *  (Since Linux 2.4.36 / 2.6.23) If a set-user-ID or set-group-ID program  is  being  exe‐
          cuted, then the parent death signal set by pprrccttll(2) PPRR__SSEETT__PPDDEEAATTHHSSIIGG flag is cleared.

       *  The  process name, as set by pprrccttll(2) PPRR__SSEETT__NNAAMMEE (and displayed by _p_s _-_o _c_o_m_m), is re‐
          set to the name of the new executable file.

       *  The SSEECCBBIITT__KKEEEEPP__CCAAPPSS _s_e_c_u_r_e_b_i_t_s flag is cleared.  See ccaappaabbiilliittiieess(7).

       *  The termination signal is reset to SSIIGGCCHHLLDD (see cclloonnee(2)).

       *  The file descriptor table is unshared, undoing the effect of the  CCLLOONNEE__FFIILLEESS  flag  of
          cclloonnee(2).

       Note the following further points:

       *  All  threads  other than the calling thread are destroyed during an eexxeeccvvee().  Mutexes,
          condition variables, and other pthreads objects are not preserved.

       *  The equivalent of _s_e_t_l_o_c_a_l_e_(_L_C___A_L_L_, _"_C_"_) is executed at program start-up.

       *  POSIX.1 specifies that the dispositions of any signals that are ignored or set  to  the
          default  are  left unchanged.  POSIX.1 specifies one exception: if SSIIGGCCHHLLDD is being ig‐
          nored, then an implementation may leave the disposition unchanged or reset  it  to  the
          default; Linux does the former.

       *  Any outstanding asynchronous I/O operations are canceled (aaiioo__rreeaadd(3), aaiioo__wwrriittee(3)).

       *  For the handling of capabilities during eexxeeccvvee(), see ccaappaabbiilliittiieess(7).

       *  By default, file descriptors remain open across an eexxeeccvvee().  File descriptors that are
          marked close-on-exec are closed; see the description of FFDD__CCLLOOEEXXEECC in ffccnnttll(2).  (If  a
          file  descriptor is closed, this will cause the release of all record locks obtained on
          the underlying file by this process.  See ffccnnttll(2) for details.)  POSIX.1 says that  if
          file descriptors 0, 1, and 2 would otherwise be closed after a successful eexxeeccvvee(), and
          the process would gain privilege because the set-user-ID or set-group_ID mode  bit  was
          set  on  the  executed  file,  then the system may open an unspecified file for each of
          these file descriptors.  As a general principle, no portable  program,  whether  privi‐
          leged or not, can assume that these three file descriptors will remain closed across an
          eexxeeccvvee().

   IInntteerrpprreetteerr ssccrriippttss
       An interpreter script is a text file that has execute permission enabled and  whose  first
       line is of the form:

           ##!!_i_n_t_e_r_p_r_e_t_e_r [optional-arg]

       The _i_n_t_e_r_p_r_e_t_e_r must be a valid pathname for an executable file.

       If  the  _p_a_t_h_n_a_m_e  argument  of eexxeeccvvee() specifies an interpreter script, then _i_n_t_e_r_p_r_e_t_e_r
       will be invoked with the following arguments:

           _i_n_t_e_r_p_r_e_t_e_r [optional-arg] _p_a_t_h_n_a_m_e arg...

       where _p_a_t_h_n_a_m_e is the absolute pathname of the file specified as the first argument of eexx‐‐
       eeccvvee(),  and  _a_r_g_._._.   is the series of words pointed to by the _a_r_g_v argument of eexxeeccvvee(),
       starting at _a_r_g_v[1].  Note that there is no way to get the _a_r_g_v_[_0_] that was passed to  the
       eexxeeccvvee() call.

       For  portable  use, _o_p_t_i_o_n_a_l_-_a_r_g should either be absent, or be specified as a single word
       (i.e., it should not contain white space); see NOTES below.

       Since Linux 2.6.28, the kernel permits the interpreter of a script to itself be a  script.
       This  permission  is  recursive, up to a limit of four recursions, so that the interpreter
       may be a script which is interpreted by a script, and so on.

   LLiimmiittss oonn ssiizzee ooff aarrgguummeennttss aanndd eennvviirroonnmmeenntt
       Most UNIX implementations impose some limit on the total size of the command-line argument
       (_a_r_g_v) and environment (_e_n_v_p) strings that may be passed to a new program.  POSIX.1 allows
       an implementation to advertise this limit using the AARRGG__MMAAXX constant  (either  defined  in
       _<_l_i_m_i_t_s_._h_> or available at run time using the call _s_y_s_c_o_n_f_(___S_C___A_R_G___M_A_X_)).

       On  Linux  prior  to  kernel 2.6.23, the memory used to store the environment and argument
       strings was limited to 32 pages (defined by the kernel constant MMAAXX__AARRGG__PPAAGGEESS).  On archi‐
       tectures with a 4-kB page size, this yields a maximum size of 128 kB.

       On  kernel 2.6.23 and later, most architectures support a size limit derived from the soft
       RRLLIIMMIITT__SSTTAACCKK resource limit (see ggeettrrlliimmiitt(2)) that is in force at the  time  of  the  eexx‐‐
       eeccvvee()  call.   (Architectures  with no memory management unit are excepted: they maintain
       the limit that was in effect before kernel 2.6.23.)  This change allows programs to have a
       much  larger argument and/or environment list.  For these architectures, the total size is
       limited to 1/4 of the allowed stack size.  (Imposing the 1/4-limit ensures  that  the  new
       program  always  has some stack space.)  Additionally, the total size is limited to 3/4 of
       the value of the kernel constant __SSTTKK__LLIIMM (8 Mibibytes).  Since Linux 2.6.25,  the  kernel
       also places a floor of 32 pages on this size limit, so that, even when RRLLIIMMIITT__SSTTAACCKK is set
       very low, applications are guaranteed to have at least as much  argument  and  environment
       space  as  was  provided by Linux 2.6.23 and earlier.  (This guarantee was not provided in
       Linux 2.6.23 and 2.6.24.)  Additionally, the limit per string is 32 pages (the kernel con‐
       stant MMAAXX__AARRGG__SSTTRRLLEENN), and the maximum number of strings is 0x7FFFFFFF.

RREETTUURRNN VVAALLUUEE
       On  success, eexxeeccvvee() does not return, on error -1 is returned, and _e_r_r_n_o is set appropri‐
       ately.

EERRRROORRSS
       EE22BBIIGG  The total number of bytes in the environment (_e_n_v_p) and argument list (_a_r_g_v) is too
              large.

       EEAACCCCEESS Search  permission  is  denied on a component of the path prefix of _p_a_t_h_n_a_m_e or the
              name of a script interpreter.  (See also ppaatthh__rreessoolluuttiioonn(7).)

       EEAACCCCEESS The file or a script interpreter is not a regular file.

       EEAACCCCEESS Execute permission is denied for the file or a script or ELF interpreter.

       EEAACCCCEESS The filesystem is mounted _n_o_e_x_e_c.

       EEAAGGAAIINN (since Linux 3.1)
              Having changed its real UID using one of the sseett**uuiidd() calls, the caller was—and is
              now still—above its RRLLIIMMIITT__NNPPRROOCC resource limit (see sseettrrlliimmiitt(2)).  For a more de‐
              tailed explanation of this error, see NOTES.

       EEFFAAUULLTT _p_a_t_h_n_a_m_e or one of the pointers in the vectors _a_r_g_v or _e_n_v_p points outside your ac‐
              cessible address space.

       EEIINNVVAALL An  ELF  executable  had  more than one PT_INTERP segment (i.e., tried to name more
              than one interpreter).

       EEIIOO    An I/O error occurred.

       EEIISSDDIIRR An ELF interpreter was a directory.

       EELLIIBBBBAADD
              An ELF interpreter was not in a recognized format.

       EELLOOOOPP  Too many symbolic links were encountered in resolving _p_a_t_h_n_a_m_e or  the  name  of  a
              script or ELF interpreter.

       EELLOOOOPP  The maximum recursion limit was reached during recursive script interpretation (see
              "Interpreter scripts", above).  Before Linux 3.8, the error produced for this  case
              was EENNOOEEXXEECC.

       EEMMFFIILLEE The per-process limit on the number of open file descriptors has been reached.

       EENNAAMMEETTOOOOLLOONNGG
              _p_a_t_h_n_a_m_e is too long.

       EENNFFIILLEE The system-wide limit on the total number of open files has been reached.

       EENNOOEENNTT The  file  _p_a_t_h_n_a_m_e  or a script or ELF interpreter does not exist, or a shared li‐
              brary needed for the file or interpreter cannot be found.

       EENNOOEEXXEECC
              An executable is not in a recognized format, is for the wrong architecture, or  has
              some other format error that means it cannot be executed.

       EENNOOMMEEMM Insufficient kernel memory was available.

       EENNOOTTDDIIRR
              A  component of the path prefix of _p_a_t_h_n_a_m_e or a script or ELF interpreter is not a
              directory.

       EEPPEERRMM  The filesystem is mounted _n_o_s_u_i_d, the user is not the superuser, and the  file  has
              the set-user-ID or set-group-ID bit set.

       EEPPEERRMM  The  process  is  being  traced, the user is not the superuser and the file has the
              set-user-ID or set-group-ID bit set.

       EEPPEERRMM  A "capability-dumb" applications would not obtain the full set of  permitted  capa‐
              bilities granted by the executable file.  See ccaappaabbiilliittiieess(7).

       EETTXXTTBBSSYY
              The specified executable was open for writing by one or more processes.

CCOONNFFOORRMMIINNGG TTOO
       POSIX.1-2001, POSIX.1-2008, SVr4, 4.3BSD.  POSIX does not document the #! behavior, but it
       exists (with some variations) on other UNIX systems.

NNOOTTEESS
       One sometimes sees eexxeeccvvee() (and the related functions described in eexxeecc(3)) described  as
       "executing a _n_e_w process" (or similar).  This is a highly misleading description: there is
       no new process; many attributes of the calling process remain  unchanged  (in  particular,
       its PID).  All that eexxeeccvvee() does is arrange for an existing process (the calling process)
       to execute a new program.

       Set-user-ID and set-group-ID processes can not be ppttrraaccee(2)d.

       The result of mounting a filesystem _n_o_s_u_i_d varies across Linux kernel versions: some  will
       refuse execution of set-user-ID and set-group-ID executables when this would give the user
       powers they did not have already (and return EEPPEERRMM), some will just ignore the set-user-ID
       and set-group-ID bits and eexxeecc() successfully.

       On Linux, _a_r_g_v and _e_n_v_p can be specified as NULL.  In both cases, this has the same effect
       as specifying the argument as a pointer to a list containing a single  null  pointer.   DDoo
       nnoott  ttaakkee  aaddvvaannttaaggee  ooff  tthhiiss nnoonnssttaannddaarrdd aanndd nnoonnppoorrttaabbllee mmiissffeeaattuurree!!  On many other UNIX
       systems, specifying _a_r_g_v as NULL will result in an error (EEFFAAUULLTT).  _S_o_m_e other  UNIX  sys‐
       tems treat the _e_n_v_p_=_=_N_U_L_L case the same as Linux.

       POSIX.1 says that values returned by ssyyssccoonnff(3) should be invariant over the lifetime of a
       process.  However, since Linux 2.6.23, if the RRLLIIMMIITT__SSTTAACCKK resource  limit  changes,  then
       the  value reported by __SSCC__AARRGG__MMAAXX will also change, to reflect the fact that the limit on
       space for holding command-line arguments and environment variables has changed.

       In most cases where eexxeeccvvee() fails, control returns to the original executable image,  and
       the  caller  of  eexxeeccvvee()  can then handle the error.  However, in (rare) cases (typically
       caused by resource exhaustion), failure may occur past the point of no return: the  origi‐
       nal  executable image has been torn down, but the new image could not be completely built.
       In such cases, the kernel kills the process with a SSIIGGKKIILLLL signal.

   IInntteerrpprreetteerr ssccrriippttss
       The kernel imposes a maximum length on the text that follows the "#!"  characters  at  the
       start  of  a script; characters beyond the limit are ignored.  Before Linux 5.1, the limit
       is 127 characters.  Since Linux 5.1, the limit is 255 characters.

       The semantics of the _o_p_t_i_o_n_a_l_-_a_r_g argument of an interpreter script vary across  implemen‐
       tations.  On Linux, the entire string following the _i_n_t_e_r_p_r_e_t_e_r name is passed as a single
       argument to the interpreter, and this string can include white space.   However,  behavior
       differs  on  some  other systems.  Some systems use the first white space to terminate _o_p_‐
       _t_i_o_n_a_l_-_a_r_g.  On some systems, an interpreter script can have multiple arguments, and white
       spaces in _o_p_t_i_o_n_a_l_-_a_r_g are used to delimit the arguments.

       Linux  (like most other modern UNIX systems) ignores the set-user-ID and set-group-ID bits
       on scripts.

   eexxeeccvvee(()) aanndd EEAAGGAAIINN
       A more detailed explanation of the EEAAGGAAIINN error that can  occur  (since  Linux  3.1)  when
       calling eexxeeccvvee() is as follows.

       The  EEAAGGAAIINN  error  can  occur  when a _p_r_e_c_e_d_i_n_g call to sseettuuiidd(2), sseettrreeuuiidd(2), or sseettrree‐‐
       ssuuiidd(2) caused the real user ID of the process to  change,  and  that  change  caused  the
       process to exceed its RRLLIIMMIITT__NNPPRROOCC resource limit (i.e., the number of processes belonging
       to the new real UID exceeds the resource limit).  From Linux 2.6.0 to 3.0, this caused the
       sseett**uuiidd()  call  to  fail.  (Prior to 2.6, the resource limit was not imposed on processes
       that changed their user IDs.)

       Since Linux 3.1, the scenario just described no longer causes the sseett**uuiidd() call to  fail,
       because  it  too often led to security holes where buggy applications didn't check the re‐
       turn status and assumed that—if the caller had root privileges—the call would always  suc‐
       ceed.   Instead,  the sseett**uuiidd() calls now successfully change the real UID, but the kernel
       sets an internal flag, named PPFF__NNPPRROOCC__EEXXCCEEEEDDEEDD, to note  that  the  RRLLIIMMIITT__NNPPRROOCC  resource
       limit  has  been exceeded.  If the PPFF__NNPPRROOCC__EEXXCCEEEEDDEEDD flag is set and the resource limit is
       still exceeded at the time of a subsequent eexxeeccvvee() call, that call fails with  the  error
       EEAAGGAAIINN.   This kernel logic ensures that the RRLLIIMMIITT__NNPPRROOCC resource limit is still enforced
       for the common privileged daemon workflow—namely, ffoorrkk(2) + sseett**uuiidd() + eexxeeccvvee().

       If the resource limit was not still exceeded at the time of  the  eexxeeccvvee()  call  (because
       other  processes  belonging to this real UID terminated between the sseett**uuiidd() call and the
       eexxeeccvvee() call), then the eexxeeccvvee() call succeeds and the  kernel  clears  the  PPFF__NNPPRROOCC__EEXX‐‐
       CCEEEEDDEEDD  process  flag.   The  flag is also cleared if a subsequent call to ffoorrkk(2) by this
       process succeeds.

   HHiissttoorriiccaall
       With UNIX V6, the argument list of an eexxeecc() call was ended by 0, while the argument  list
       of  _m_a_i_n  was  ended by -1.  Thus, this argument list was not directly usable in a further
       eexxeecc() call.  Since UNIX V7, both are NULL.

EEXXAAMMPPLLEE
       The following program is designed to be execed by  the  second  program  below.   It  just
       echoes its command-line arguments, one per line.

           /* myecho.c */

           #include <stdio.h>
           #include <stdlib.h>

           int
           main(int argc, char *argv[])
           {
               int j;

               for (j = 0; j < argc; j++)
                   printf("argv[%d]: %s\n", j, argv[j]);

               exit(EXIT_SUCCESS);
           }

       This program can be used to exec the program named in its command-line argument:

           /* execve.c */

           #include <stdio.h>
           #include <stdlib.h>
           #include <unistd.h>

           int
           main(int argc, char *argv[])
           {
               char *newargv[] = { NULL, "hello", "world", NULL };
               char *newenviron[] = { NULL };

               if (argc != 2) {
                   fprintf(stderr, "Usage: %s <file-to-exec>\n", argv[0]);
                   exit(EXIT_FAILURE);
               }

               newargv[0] = argv[1];

               execve(argv[1], newargv, newenviron);
               perror("execve");   /* execve() returns only on error */
               exit(EXIT_FAILURE);
           }

       We can use the second program to exec the first as follows:

           $ cccc mmyyeecchhoo..cc --oo mmyyeecchhoo
           $ cccc eexxeeccvvee..cc --oo eexxeeccvvee
           $ ..//eexxeeccvvee ..//mmyyeecchhoo
           argv[0]: ./myecho
           argv[1]: hello
           argv[2]: world

       We can also use these programs to demonstrate the use of a script interpreter.  To do this
       we create a script whose "interpreter" is our _m_y_e_c_h_o program:

           $ ccaatt >> ssccrriipptt
           ##!!..//mmyyeecchhoo ssccrriipptt--aarrgg
           ^^DD
           $ cchhmmoodd ++xx ssccrriipptt

       We can then use our program to exec the script:

           $ ..//eexxeeccvvee ..//ssccrriipptt
           argv[0]: ./myecho
           argv[1]: script-arg
           argv[2]: ./script
           argv[3]: hello
           argv[4]: world

SSEEEE AALLSSOO
       cchhmmoodd(2),  eexxeeccvveeaatt(2),  ffoorrkk(2),  ggeett__rroobbuusstt__lliisstt(2),  ppttrraaccee(2),  eexxeecc(3),   ffeexxeeccvvee(3),
       ggeettoopptt(3), ssyysstteemm(3), ccrreeddeennttiiaallss(7), eennvviirroonn(7), ppaatthh__rreessoolluuttiioonn(7), lldd..ssoo(8)

CCOOLLOOPPHHOONN
       This  page  is  part of release 5.05 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the
       project, information about reporting bugs, and the latest version of  this  page,  can  be
       found at https://www.kernel.org/doc/man-pages/.

Linux                                       2019-10-10                                  EXECVE(2)
